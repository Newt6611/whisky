# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Rust Package

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build-test:
    name: Build and test (${{ matrix.os }})

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - uses: swatinem/rust-cache@v2
      - name: Build core
        run: >
          cd core &&
          cargo build
          --locked
          --verbose

      - uses: actions/checkout@v3
      - uses: swatinem/rust-cache@v2
      - name: Build rust
        run: >
          cd rust &&
          cargo build
          --locked
          --verbose

      - name: Run core tests (without coverage)
        if: matrix.os != 'ubuntu-latest'
        run: >
          cd core &&
          cargo test
          --verbose

      - name: Run rust tests (without coverage)
        if: matrix.os != 'ubuntu-latest'
        run: >
          cd rust &&
          cargo test
          --verbose

      - name: Run core tests (with coverage)
        if: matrix.os == 'ubuntu-latest'
        run: >
          cd core &&
          cargo install cargo-tarpaulin
          && cargo tarpaulin
          --verbose
          --out Xml
          --engine llvm
          --skip-clean

      - name: Run rust tests (with coverage)
        if: matrix.os == 'ubuntu-latest'
        run: >
          cd rust &&
          cargo install cargo-tarpaulin
          && cargo tarpaulin
          --verbose
          --out Xml
          --engine llvm
          --skip-clean

      - name: Upload coverage reports to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3

  check-version:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      rust-version-updated: ${{ steps.compare-versions.outputs.version-updated }}
    steps:
      - name: Checkout master branch at commit before merge
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}

      - name: Get package version from master branch before merge
        id: pre-merge-version
        run: |
          RUST_PRE_MERGE_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')
          echo "rust_pre_merge_version=$RUST_PRE_MERGE_VERSION" >> "$GITHUB_ENV"

      - name: Checkout master branch at commit after merge
        uses: actions/checkout@v4
        with:
          ref: "master"

      - name: Get package version from master branch after merge
        id: post-merge-version
        run: |
          RUST_POST_MERGE_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')
          echo "rust_post_merge_version=$RUST_POST_MERGE_VERSION" >> "$GITHUB_ENV"

      - name: Compare versions
        id: compare-versions
        run: |
          if [[ "${{ steps.pre-merge-version.outputs.rust_pre_merge_version }}" != "${{ steps.post-merge-version.outputs.rust_post_merge_version }}" ]]; then
              echo "rust-version-updated=true" >> "$GITHUB_OUTPUT"
          else
              echo "rust-version-updated=false" >> "$GITHUB_OUTPUT"
          fi

  publish-crate:
    needs: build-test
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - run: cd rust && cargo publish --token ${PUBLISH_KEY}
        env:
          PUBLISH_KEY: ${{ secrets.PUBLISH_KEY }}
